import { useEffect, useState } from "react";
import { NavLink } from "react-router-dom";
import logo from "../assets/logo.svg";
import TImer from "../components/TImer";
import Church from "../components/Church";
import Sermons from "../components/Sermons";
import Blog from "../components/Blog";
import Gallery from "../components/Gallery";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
  type CarouselApi,
} from "@/components/ui/carousel";

import Header from "../components/Header";
import Footer from "@/components/footer";

const firstBackgound = "https://i.imgur.com/x35j7sr.jpeg";
const secondback = "https://i.imgur.com/UXNy8WO.png";
const book1 = "https://i.imgur.com/FJNZUFp.png";
const book2 = "https://i.imgur.com/kJFx9fz.png";
const bible = "https://i.imgur.com/Vca7WCH.png";

const Homepage = () => {
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [api, setApi] = useState<CarouselApi>();
  const [currentSlide, setCurrentSlide] = useState(0);
  const [previousSlide, setPreviousSlide] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const backgroundImages = [firstBackgound, secondback];

  const events = [
    {
      image: book1,
      date: "April 30, 2025",
      title: "Relationship With",
      link: "/events",
      text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit...",
    },
    {
      image: book2,
      date: "April 30, 2025",
      title: "Abundant Love",
      link: "/events",
      text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit...",
    },
    {
      image: bible,
      date: "April 30, 2025",
      title: "God is Good",
      link: "/events",
      text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit...",
    },
  ];

  useEffect(() => {
    if (!api) return;

    const interval = setInterval(() => {
      api.scrollNext();
    }, 10000);

    const handleSelect = () => {
      setPreviousSlide(currentSlide);
      setIsTransitioning(true);
      setCurrentSlide(api.selectedScrollSnap());

      // Reset transition state after animation completes
      setTimeout(() => {
        setIsTransitioning(false);
      }, 1000);
    };

    api.on("select", handleSelect);

    return () => {
      clearInterval(interval);
      api.off("select", handleSelect);
    };
  }, [api, currentSlide]);

  // Add CSS using useEffect to inject the animation styles
  useEffect(() => {
    // Create style element
    const styleEl = document.createElement("style");
    styleEl.textContent = `
      @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
      }
    `;
    // Append to document head
    document.head.appendChild(styleEl);

    // Clean up on unmount
    return () => {
      document.head.removeChild(styleEl);
    };
  }, []);

  return (
    <>
      <div
        className="flex flex-col relative bg-cover bg-center min-h-screen"
        style={{
          backgroundImage: `url(${backgroundImages[currentSlide]})`,
          backgroundSize: "cover",
          backgroundPosition: "center",
          transition: "background-image 0.5s ease-in-out",
        }}
      >
        {/* Add a fade overlay for smoother transitions */}
        {isTransitioning && (
          <div
            className="absolute inset-0 bg-cover bg-center z-0"
            style={{
              backgroundImage: `url(${backgroundImages[previousSlide]})`,
              opacity: 0,
              animation: "fadeOut 0.5s ease-in-out",
            }}
          />
        )}

        <Header />

        <div className="flex items-center justify-between p-4 w-full relative z-10">
          <div className="flex items-center">
            <img src={logo} alt="logo" className="w-24 md:w-33" />
          </div>

          <div className="hidden md:flex gap-4 text-white text-sm capitalize cursor-pointer">
            {["home", "join", "sermons", "Events", "Give", "Gallery"].map(
              (link) => (
                <NavLink
                  key={link}
                  to={`/${link === "home" ? "" : link.toLowerCase()}`}
                  className={({ isActive }) =>
                    `px-4 py-1 ${isActive ? "underline" : "hover:underline"}`
                  }
                >
                  {link}
                </NavLink>
              )
            )}
          </div>

          <div className="md:hidden">
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="text-white text-3xl"
            >
              ☰
            </button>
          </div>
        </div>

        {isMobileMenuOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-90 flex flex-col justify-center items-center z-50 min-h-screen">
            <button
              onClick={() => setIsMobileMenuOpen(false)}
              className="absolute top-4 right-4 text-white text-2xl focus:outline-none"
              aria-label="Close menu"
            >
              ×
            </button>

            <nav className="flex flex-col items-center gap-3 w-full max-w-xs px-4">
              {["home", "join", "sermons", "Events", "Give", "Gallery"].map(
                (link) => (
                  <NavLink
                    key={link}
                    to={`/${link === "home" ? "" : link.toLowerCase()}`}
                    onClick={() => setIsMobileMenuOpen(false)}
                    className={({ isActive }) =>
                      `text-white text-lg py-2 w-full text-center border-b border-white/20 cursor-pointer capitalize transition-all duration-200 ${
                        isActive ? "font-bold" : "hover:bg-white/10"
                      }`
                    }
                  >
                    {link}
                  </NavLink>
                )
              )}
            </nav>
          </div>
        )}

        <main className="flex-grow relative h-[50vh] md:h-[70vh] lg:h-[80vh]">
          {/* Fixed content overlay */}
          <div className="absolute inset-0 z-20 flex items-center justify-center h-full">
            <div className="flex items-center justify-center h-full text-white mt-33 px-4">
              <div className="text-center">
                <h1 className="text-lg md:text-4xl font-normal mb-2 md:mb-4">
                  Welcome to
                </h1>
                <p className="text-xl md:text-5xl font-bold mb-3 md:mb-5">
                  RCCG StrongTower Stouffville
                </p>
                <p className="text-base md:text-2xl mb-4 md:mb-8">
                  A Place of Worship, Growth, and Community
                </p>
                <div className="space-x-2 md:space-x-4">
                  <NavLink to="/join">
                    <button className="bg-white text-black px-4 py-2 md:px-6 md:py-3 rounded-full cursor-pointer text-sm md:text-base">
                      Join Us
                    </button>
                  </NavLink>
                  <NavLink to="/events">
                    <button className="border border-white px-4 py-2 md:px-6 md:py-3 rounded-full cursor-pointer text-sm md:text-base">
                      Learn More
                    </button>
                  </NavLink>
                </div>
              </div>
            </div>
          </div>

          {/* Background image carousel */}
          <Carousel
            setApi={setApi}
            opts={{ align: "start", loop: true }}
            className="relative h-full ease-in-out"
          >
            <CarouselContent className="h-full">
              {backgroundImages.map((_, index) => (
                <CarouselItem key={index} className="h-full">
                  {/* Empty carousel items - just for triggering slide changes */}
                </CarouselItem>
              ))}
            </CarouselContent>
            <CarouselPrevious className="absolute left-2 md:left-4 top-1/2 -translate-y-1/2 z-30 bg-black/50 p-1 md:p-2 rounded-full hover:bg-black/50 hover:text-white" />
            <CarouselNext className="absolute right-2 md:right-4 top-1/2 -translate-y-1/2 z-30 bg-black/50 p-1 md:p-2 rounded-full hover:bg-black/50 hover:text-white" />
          </Carousel>
        </main>
      </div>

      <div className="flex flex-col md:flex-row h-auto md:h-64 overflow-hidden">
        <div className="w-full md:w-1/6 bg-orange-400 flex flex-col justify-center p-4 md:p-7">
          <p className="uppercase text-sm text-white">UPCOMING</p>
          <p className="uppercase text-2xl md:text-4xl font-small text-white">
            Events
          </p>
        </div>

        <div className="flex flex-col md:flex-row flex-grow">
          {events.map((event, index) => (
            <div
              key={index}
              className="w-full md:flex-1 h-64 md:h-full bg-white relative group overflow-hidden"
              onMouseEnter={() => setHoveredIndex(index)}
              onMouseLeave={() => setHoveredIndex(null)}
            >
              <img
                src={event.image}
                alt={event.title}
                className="w-full h-full object-cover transition-transform duration-700 ease-in-out"
                style={{
                  transform:
                    hoveredIndex === index ? "scale(1.1)" : "scale(1)",
                }}
              />
              <div
                className={`absolute inset-0 bg-white flex flex-col justify-center text-white gap-2 md:gap-4 p-4 transition-all duration-700 ease-in-out ${
                  hoveredIndex === index
                    ? "opacity-80 transform translate-y-0"
                    : "opacity-0 transform translate-y-full"
                }`}
              >
                <span className="text-base md:text-xl text-[#0D0D0D99] font-bold">
                  {event.date}
                </span>
                <p className="text-xl md:text-2xl text-black font-bold">
                  {event.title}
                </p>
                <p className="text-sm md:text-base text-[#0D0D0D99] font-light">
                  {event.text}
                </p>
                <NavLink
                  to="/events"
                  className="text-sm underline cursor-pointer text-[#0D0D0D99] hover:text-black transition-colors duration-300"
                >
                  Learn More....
                </NavLink>
              </div>
              <div
                className={`absolute bottom-0 left-0 right-0 bg-white/80 text-black p-3 md:p-4 transition-all duration-700 ease-in-out ${
                  hoveredIndex === index
                    ? "transform translate-y-full"
                    : "transform translate-y-0"
                }`}
              >
                <span className="flex flex-col justify-center text-gray-400 gap-1 md:gap-2">
                  {event.date}
                  <span className="text-sm md:text-lg font-small text-black">
                    {event.title}
                  </span>
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>

      <TImer />
      <Church />
      <Sermons />
      <Blog />
      <Gallery />

      <Footer />
    </>
  );
};

export default Homepage;
import { useState } from "react";
import { NavLink } from "react-router-dom";
import Header from "@/components/Header";
import logo from "../assets/logo.svg";
import Footer from "@/components/footer";

interface Event {
  image: string;
  title: string;
  day: string;
  month: string;
  time: string;
  content: string;
  contents?: string;
  start?: string;
  end?: string;
  venue?: string;
  phone?: string;
  email?: string;
}

interface EventsProps {
  events: Event;
  onClick: () => void;
}
const book1 = "https://i.imgur.com/FJNZUFp.png";
const book2 ="https://i.imgur.com/kJFx9fz.png";
const header = "https://i.imgur.com/K38ANvA.png"
const EventContent: Event[] = [
  {
    image: book1,
    title: "Sunday Services (Every Sunday)",
    day: "Every",
    month: "Sunday",
    time: "10:00 EST",

    content:
      "Join us Sundays for powerful worship, Bible-based teaching, and real community. Experience God’s presence and find your purpose with us!",
    contents:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc mattis ligula pellentesque nisi tristique porta. Vestibulum eget nisi est. Vivamus pharetra mattis ornare. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nunc eget nisl vel nisl pellentesque semper sed quis tellus. Integer euismod consequat ipsum eget congue. Aliquam sit amet ipsum ornare, aliquam arcu eu, eleifend ante. Vestibulum iaculis finibus quam, quis vestibulum ligula blandit ut. Suspendisse sit amet dolor vitae lectus posuere vestibulum. Fusce a est dui.",
    start: "August 31 @10:00 :00 EST",
    end: "August 31 @10:00 :00 EST",
    venue: "Ballantrae Community Center 5592 Aurora Rd Whitchurch Stouffville.",
    phone: "+1 647-695 5700",
    email: " welcome@rccgstouffville.org",
  },
  {
    image: book2,
    title: "Morning Mercy Prayer meeting ",
    day: "Every",
    month: "Monday",
    time: "8:00 EST",
    contents:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc mattis ligula pellentesque nisi tristique porta. Vestibulum eget nisi est. Vivamus pharetra mattis ornare. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nunc eget nisl vel nisl pellentesque semper sed quis tellus. Integer euismod consequat ipsum eget congue. Aliquam sit amet ipsum ornare, aliquam arcu eu, eleifend ante. Vestibulum iaculis finibus quam, quis vestibulum ligula blandit ut. Suspendisse sit amet dolor vitae lectus posuere vestibulum. Fusce a est dui.",
    content:
      "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
    start: " Mondays, Wednesdays, and Fridays  5:30am EST",
    end: " Mondays, Wednesdays, and Fridays  6:00am @8:00 EST",
    venue: "Ballantrae Community Center 5592 Aurora Rd Whitchurch Stouffville.",
    phone: "+1 647-695 5700",
    email: " welcome@rccgstouffville.org",
  },
  {
    image: book1,
    title: "ICUTL- I Cry Unto The Lord ",
    day: "Every",
    month: "last saturday",
    time: "7:00am EST",
    contents:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc mattis ligula pellentesque nisi tristique porta. Vestibulum eget nisi est. Vivamus pharetra mattis ornare. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nunc eget nisl vel nisl pellentesque semper sed quis tellus. Integer euismod consequat ipsum eget congue. Aliquam sit amet ipsum ornare, aliquam arcu eu, eleifend ante. Vestibulum iaculis finibus quam, quis vestibulum ligula blandit ut. Suspendisse sit amet dolor vitae lectus posuere vestibulum. Fusce a est dui.",
    content:
      "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
    start: "August 31 @8:00 EST",
    end: "August 31 @8:00 EST",
    venue: "Ballantrae Community Center 5592 Aurora Rd Whitchurch Stouffville.",
    phone: "+1 647-695 5700",
    email: " welcome@rccgstouffville.org",
  },
  {
    image: book2,
    title: "Digging Deep",
    day: "Every",
    month: "2nd and 4th",
    time: "Tuesdays",
    content:
      "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
    start: "sep 31 @8:00 EST",
    end: "August 31 @8:00 EST",
    venue: "Ballantrae Community Center 5592 Aurora Rd Whitchurch Stouffville.",
    phone: "+1 647-695 5700",
    email: " welcome@rccgstouffville.org",
  },
];

const Events = ({ events, onClick }: EventsProps) => {
  return (
    <div
      className='flex flex-col md:flex-row gap-4 cursor-pointer w-full'
      onClick={onClick}
    >
      <div className='flex flex-col w-full'>
        <div className='flex w-full'>
          {/* Made image responsive */}
          <img src={events.image} alt='image' className='w-3/4 object-cover' />
          <span className='flex flex-col bg-[#FF7F00] w-1/4 items-center justify-center p-2'>
            <p className='text-lg md:text-3xl font-bold text-white'>{events.day}</p>
            <p className='text-xs md:text-lg font-light text-white'>{events.month}</p>
            <p className='text-sm md:text-xl text-white'>{events.time}</p>
          </span>
        </div>
        <div className='flex flex-col w-full justify-center bg-[#F2F2F2] p-4'>
          <p className='text-black font-normal text-lg md:text-xl'>{events.title}</p>
          <p className='text-xs md:text-sm text-gray-500'>{events.content}</p>
        </div>
      </div>
    </div>
  );
};

const EventPage = () => {
  const [eventsOpen, setEventOpen] = useState<number | null>(null);
  const [SelectedEventTitle, setSelectedEventTitle] = useState<string | null>(null);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  
  const handleEventClick = (index: number) => {
    setSelectedEventTitle(EventContent[index].title);
    setEventOpen(index === eventsOpen ? null : index);
  };

  const selectedEvent = eventsOpen !== null ? EventContent[eventsOpen] : null;

  return (
    <section className="overflow-x-hidden">
      <div
        className="flex flex-col"
        style={{
          backgroundImage: `url(${header})`,
          backgroundSize: "cover",
          backgroundPosition: "center",
          transition: "background-image",
        }}
      >
        <Header />

        <div className="flex items-center justify-between p-4 w-full">
        <NavLink to="/">
            <div className="flex items-center">
              <img src={logo} alt="logo" className="w-24 md:w-33" />
            </div>
            </NavLink>

          <div className="hidden md:flex gap-4 text-white text-sm capitalize cursor-pointer">
            {["home", "join", "sermons", "Events", "Give", "Gallery"].map(
              (link) => (
                <NavLink
                  key={link}
                  to={`/${link === "home" ? "" : link.toLowerCase()}`}
                  className={({ isActive }) =>
                    `px-4 py-1 ${isActive ? "underline" : "hover:underline"}`
                  }
                >
                  {link}
                </NavLink>
              )
            )}
          </div>

          <div className="md:hidden">
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="text-white text-3xl"
            >
              ☰
            </button>
          </div>
        </div>

        {isMobileMenuOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-90 flex flex-col justify-center items-center z-50 min-h-screen">
            <button
              onClick={() => setIsMobileMenuOpen(false)}
              className="absolute top-4 right-4 text-white text-2xl focus:outline-none"
              aria-label="Close menu"
            >
              ×
            </button>

            <nav className="flex flex-col items-center gap-3 w-full max-w-xs px-4">
              {["home", "join", "sermons", "Events", "Give", "Gallery"].map((link) => (
                <NavLink
                  key={link}
                  to={`/${link === "home" ? "" : link.toLowerCase()}`}
                  onClick={() => setIsMobileMenuOpen(false)}
                  className={({ isActive }) =>
                    `text-white text-lg py-2 w-full text-center border-b border-white/20 cursor-pointer capitalize transition-all duration-200 ${
                      isActive ? "font-bold" : "hover:bg-white/10"
                    }`
                  }
                >
                  {link}
                </NavLink>
              ))}
            </nav>
          </div>
        )}
        <div>
          <div className='flex flex-col gap-4 justify-center items-center p-6'>
            <hr className='w-full h-0.5 text-white opacity-50' />
            <h1 className='text-xl md:text-4xl capitalize text-white'>
              {SelectedEventTitle || "Our Events"}
            </h1>
            <hr className='w-full h-0.5 text-white opacity-50' />
          </div>
        </div>
      </div>
      
      {eventsOpen === null ? (
        <div className='flex justify-center px-4 md:px-12'>
          <div className='grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-16 py-8 md:py-12 mt-5 w-full'>
            {EventContent.map((event, index) => (
              <Events
                key={index}
                events={event}
                onClick={() => handleEventClick(index)}
              />
            ))}
          </div>
        </div>
      ) : (
        <section className='flex flex-col lg:flex-row justify-center gap-6 p-4 md:p-6 max-w-6xl mx-auto'>
          <div className='w-full lg:w-2/3'>
            <img
              src={selectedEvent?.image}
              alt='event'
              className='w-full h-auto rounded-md mb-4'
            />
            <p className='text-[#0D0D0D99] mb-4 text-sm md:text-base'>{selectedEvent?.contents}</p>

            <div className='text-xs md:text-sm text-gray-700 space-y-4'>
              <div className='flex flex-col md:flex-row gap-6'>
                <div>
                  <p className='font-medium'>Start:</p>
                  <p>{selectedEvent?.start}</p>
                </div>
                <div>
                  <p className='font-medium'>End:</p>
                  <p>{selectedEvent?.end}</p>
                </div>
              </div>

              <div>
                <p className='font-medium'>Venue:</p>
                <p className="break-words">{selectedEvent?.venue}</p>
              </div>

              <div>
                <p className='font-medium'>Phone:</p>
                <p>{selectedEvent?.phone}</p>
              </div>

              <div>
                <p className='font-medium'>Email:</p>
                <p className="break-words">{selectedEvent?.email}</p>
              </div>
            </div>
          </div>
          
          <div className="mt-8 lg:mt-0 lg:w-1/3">
            <p className="text-lg mb-3 font-medium">Other Events</p>
            <div className="flex cursor-pointer mb-4" onClick={() => setEventOpen(null)}>
              <div className="flex flex-col justify-center items-center w-16 md:w-20">
                <div className="items-center text-center bg-[#FF7F00] py-2 px-3 text-white">11</div>
                <div className="items-center text-xs md:text-sm border px-2">Nov</div>
              </div>
              <div className="flex flex-col ml-2">
                <p className="text-[#FF7F00] text-sm md:text-base">Abundant Love</p>
                <p className="text-xs md:text-sm">Lorem ipsum dolor sit amet, consectetur adipiscing ...</p>
              </div>
            </div>
            
            <div className="flex cursor-pointer mb-4" onClick={() => setEventOpen(null)}>
              <div className="flex flex-col justify-center items-center w-16 md:w-20">
                <div className="items-center text-center bg-[#FF7F00] py-2 px-3 text-white">11</div>
                <div className="items-center text-xs md:text-sm border px-2">Nov</div>
              </div>
              <div className="flex flex-col ml-2">
                <p className="text-[#FF7F00] text-sm md:text-base">Abundant Love</p>
                <p className="text-xs md:text-sm">Lorem ipsum dolor sit amet, consectetur adipiscing ...</p>
              </div>
            </div>
            
            <div className="flex cursor-pointer" onClick={() => setEventOpen(null)}>
              <div className="flex flex-col justify-center items-center w-16 md:w-20">
                <div className="items-center text-center bg-[#FF7F00] py-2 px-3 text-white">11</div>
                <div className="items-center text-xs md:text-sm border px-2">Nov</div>
              </div>
              <div className="flex flex-col ml-2">
                <p className="text-[#FF7F00] text-sm md:text-base">Abundant Love</p>
                <p className="text-xs md:text-sm">Lorem ipsum dolor sit amet, consectetur adipiscing ...</p>
              </div>
            </div>
          </div>
        </section>
      )}

      <Footer />
    </section>
  );
};

export default EventPage;